package com.db;
// default package
// Generated Nov 6, 2014 12:59:42 AM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * AccountSummary generated by hbm2java
 */
@Entity
@Table(name = "account_summary", catalog = "cse545group4bank")
public class AccountSummary implements java.io.Serializable {

	private int accountNumber;
	private Employee employee;
	private int balance;
	private Boolean updateFlag;
	private Boolean deleteFlag;
	private Boolean viewFlag;
	private Boolean sentToAdminFlag;
	private Set<Dummytransaction> dummytransactionsForUserReceiving = new HashSet<Dummytransaction>(
			0);
	private Set<Dummytransaction> dummytransactionsForUserSending = new HashSet<Dummytransaction>(
			0);
	private Set<Transaction> transactionsForSender = new HashSet<Transaction>(0);
	private Set<Transaction> transactionsForReceiver = new HashSet<Transaction>(
			0);

	public AccountSummary() {
	}

	public AccountSummary(int accountNumber, int balance) {
		this.accountNumber = accountNumber;
		this.balance = balance;
	}

	public AccountSummary(int accountNumber, Employee employee, int balance,
			Boolean updateFlag, Boolean deleteFlag, Boolean viewFlag,
			Boolean sentToAdminFlag,
			Set<Dummytransaction> dummytransactionsForUserReceiving,
			Set<Dummytransaction> dummytransactionsForUserSending,
			Set<Transaction> transactionsForSender,
			Set<Transaction> transactionsForReceiver) {
		this.accountNumber = accountNumber;
		this.employee = employee;
		this.balance = balance;
		this.updateFlag = updateFlag;
		this.deleteFlag = deleteFlag;
		this.viewFlag = viewFlag;
		this.sentToAdminFlag = sentToAdminFlag;
		this.dummytransactionsForUserReceiving = dummytransactionsForUserReceiving;
		this.dummytransactionsForUserSending = dummytransactionsForUserSending;
		this.transactionsForSender = transactionsForSender;
		this.transactionsForReceiver = transactionsForReceiver;
	}

	@Id
	@Column(name = "ACCOUNT_NUMBER", unique = true, nullable = false)
	public int getAccountNumber() {
		return this.accountNumber;
	}

	public void setAccountNumber(int accountNumber) {
		this.accountNumber = accountNumber;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMPLOYEE_ID_REVIEWING")
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@Column(name = "BALANCE", nullable = false)
	public int getBalance() {
		return this.balance;
	}

	public void setBalance(int balance) {
		this.balance = balance;
	}

	@Column(name = "UPDATE_FLAG")
	public Boolean getUpdateFlag() {
		return this.updateFlag;
	}

	public void setUpdateFlag(Boolean updateFlag) {
		this.updateFlag = updateFlag;
	}

	@Column(name = "DELETE_FLAG")
	public Boolean getDeleteFlag() {
		return this.deleteFlag;
	}

	public void setDeleteFlag(Boolean deleteFlag) {
		this.deleteFlag = deleteFlag;
	}

	@Column(name = "VIEW_FLAG")
	public Boolean getViewFlag() {
		return this.viewFlag;
	}

	public void setViewFlag(Boolean viewFlag) {
		this.viewFlag = viewFlag;
	}

	@Column(name = "SENT_TO_ADMIN_FLAG")
	public Boolean getSentToAdminFlag() {
		return this.sentToAdminFlag;
	}

	public void setSentToAdminFlag(Boolean sentToAdminFlag) {
		this.sentToAdminFlag = sentToAdminFlag;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountSummaryByUserReceiving")
	public Set<Dummytransaction> getDummytransactionsForUserReceiving() {
		return this.dummytransactionsForUserReceiving;
	}

	public void setDummytransactionsForUserReceiving(
			Set<Dummytransaction> dummytransactionsForUserReceiving) {
		this.dummytransactionsForUserReceiving = dummytransactionsForUserReceiving;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountSummaryByUserSending")
	public Set<Dummytransaction> getDummytransactionsForUserSending() {
		return this.dummytransactionsForUserSending;
	}

	public void setDummytransactionsForUserSending(
			Set<Dummytransaction> dummytransactionsForUserSending) {
		this.dummytransactionsForUserSending = dummytransactionsForUserSending;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountSummaryBySender")
	public Set<Transaction> getTransactionsForSender() {
		return this.transactionsForSender;
	}

	public void setTransactionsForSender(Set<Transaction> transactionsForSender) {
		this.transactionsForSender = transactionsForSender;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountSummaryByReceiver")
	public Set<Transaction> getTransactionsForReceiver() {
		return this.transactionsForReceiver;
	}

	public void setTransactionsForReceiver(
			Set<Transaction> transactionsForReceiver) {
		this.transactionsForReceiver = transactionsForReceiver;
	}

}
